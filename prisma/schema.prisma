// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String       @id @default(cuid())
  email     String       @unique
  name      String?
  password  String
  accounts  Account[]
  wallets   Wallet[]     // A user can have many wallets
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Wallet {
  id        String         @id @default(cuid())
  name      String
  balance   Float          @default(0)
  currency  String
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[] // A wallet can have many transactions
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  type        String
  category    String
  date        DateTime @default(now())
  notes       String?
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

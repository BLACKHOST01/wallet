// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma schema for a realistic banking backend

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------
// Enums
// -------------------------
enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum Currency {
  NGN
  USD
  EUR
  GBP
  // Add more as needed
}

// -------------------------
// Models
// -------------------------

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  password     String
  bankAccounts BankAccount[] 
  wallets      Wallet[]
  audits       AuditLog[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model BankAccount {
  id            String       @id @default(cuid())
  accountNumber String       @unique
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountType   String       // "Checking", "Savings", etc.
  balance       Float        @default(0)
  currency      Currency
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  outgoingTx    Transaction[] @relation("fromAccount")
  incomingTx    Transaction[] @relation("toAccount")
}

model Wallet {
  id            String        @id @default(cuid())
  name          String
  balance       Float         @default(0)
  currency      Currency
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkedAccount String?       // Optional: link to BankAccount.id
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Transaction {
  id            String            @id @default(cuid())
  amount        Float
  type          TransactionType
  category      String?
  date          DateTime          @default(now())
  notes         String?
  walletId      String?           // optional if transaction is bank account transfer
  fromAccountId String?           
  toAccountId   String?
  status        TransactionStatus @default(PENDING)
  reference     String            @unique
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  wallet        Wallet?           @relation(fields: [walletId], references: [id], onDelete: Cascade)
  fromAccount   BankAccount?      @relation("fromAccount", fields: [fromAccountId], references: [id])
  toAccount     BankAccount?      @relation("toAccount", fields: [toAccountId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  detail    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}
